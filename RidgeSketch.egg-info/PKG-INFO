Metadata-Version: 1.0
Name: RidgeSketch
Version: 0.0.0
Summary: UNKNOWN
Home-page: UNKNOWN
Author: UNKNOWN
Author-email: UNKNOWN
License: UNKNOWN
Description: # RidgeSketch
        An open source package in Python for solving large scale ridge regression using the sketch-and-project technique
        
        RidgeSketch aims to match the Scikit-learn API:
        ```
        n_samples, n_features = 1000, 500
        X = np.random.rand(n_samples, n_features)
        y = np.random.rand(n_samples, 1)
        
        model = RidgeSketch(
                    alpha=1e-1,
                    solver="subsample",
                    sketch_size=10,
                    verbose=1,
                )
        
        model.fit(X, y)
        ```
        
        ## Installation
        
        First ensure you're in a Python 3 virtual environment (see instructions below). 
        
        To install the package and requirements:
        ```pip install -e .```
        
        ### Setup a virtual environment
        Create a [Python 3 virtual environment](https://docs.python.org/3/tutorial/venv.html).
        
        For Unix or MacOS this can be done by executing: `source activate [env name]`
        1. `python3 -m venv ridgesketch-env`
        2. `source activate ridgesketch-env/bin/activate`
        
        
        ## Tutorials
        
        Tutorial notebooks for running and adding new sketches are in the `tutorials` subdirectory.
        
        ## Advanced Usage
        
        ### Run Benchmarks
        
        To run benchmarks:
        1. Specify the desired configurations in `benchmark_configs.py` (see `small` for an example)
        2. Run benchmark: `python benchmarks.py [options] [name of config]`
        
        For example to run benchmarks with the small configs: `python benchmarks.py small`
        
        For a full list of options see:
        ```
        Usage: benchmarks.py [OPTIONS] CONFIG_NAME
        
        Options:
          --folder PATH            folder path where results are saved
          --n-repetitions INTEGER  number of times to rerun benchmarks
          --save / --no-save
          --help                   Show this message and exit.
        ```
        
        ### Add a Dataset
        
        To add a dataset:
        1. Enter `datasets/data_loaders.py` and create a new Dataset subclass
        2. Specify the private arguments :
           - '_n_samples' : number of samples
           - '_n_features' : number of features
           - '_sparse_format' : format ("dense", "csr" or "csc") of the design matrix X
        3. Try to run a benchmark with this dataset by following previous section
        
        ## Contributing
        
        ### To Run Tests
        [PyTest](https://docs.pytest.org/en/latest/) is our testing framekwork.
        
        Run all test: `pytest ` from the parent directory.
        
        Test coverage report: `pytest --cov-config=.coveragerc --cov=. --runslow`
        
        ### Branch Development Workflow
        
        1. `git checkout -b feature-name`
        2. commit work as usual to your branch
        3. `git push origin feature-name`
        4. create a pull request for merging into master
           - others can review / comment on code before merging
        
        Code formatting uses [Black](https://black.readthedocs.io/en/stable/).
        To run manually: `black .` from the parent directory.
        - This should automatically run as a pre-commit hook
        
        To store requirements: `pip freeze --exclude-editable > requirements.txt`
        
        ### Generate Documentation
        
        Install Sphinx `pip install sphinx`. From the `docs` directory,
        
        1. `sphinx-build -b html . _build`
        2. `make html`
        
        To view docs: `open _build/index.html`
        
        To edit the contents change `index.rst`
        
        # License
        
        See LICENSE file.
        
        
        
        
        
        
Platform: UNKNOWN
